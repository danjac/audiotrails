#!/usr/bin/env bash

set -o errexit
# Check if $IMAGE is not set or is empty

if [ -z "$IMAGE" ]; then
  echo "ERROR: IMAGE environment variable is not set."
  exit 1
fi

echo "Deploying image $IMAGE to Kubernetes..."

export KUBECONFIG="{{ kubeconfig }}"

echo "Running pre-deployment tasks..."

# Create new release job

release_job_id=$(head -c 12 /dev/urandom | base64 | tr -dc 'a-z0-9' | head -c 12)
release_job_name="django-release-job-$release_job_id"

release_job_yaml=$(cat <<EOF
apiVersion: batch/v1
kind: Job
metadata:
  name: $release_job_name
spec:
  template:
    spec:
      containers:
        - name: django
          image: $IMAGE
          command: ["/bin/sh", "-c"]
          args: ["./release.sh"]
          envFrom:
            - configMapRef:
                name: configmap
            - secretRef:
                name: secrets
      restartPolicy: Never
      nodeSelector:
        role: jobrunner

EOF
)

echo "$release_job_yaml" | kubectl apply -f - -n default

release_pod_name=$(kubectl get pods -l job-name=$release_job_name -o jsonpath='{.items[0].metadata.name}')
release_pod_status=$(kubectl get pod $release_pod_name -o jsonpath='{.status.phase}')

delete_release_job() {
    kubectl logs $release_pod_name
    kubectl delete pod $release_pod_name
    kubectl delete job $release_job_name
}

max_retries=30
count=0

# NOTE: "kubectl wait" does not work because we can't set a "success OR failure" condition

while true; do
    # Get the job status (complete or failed)
    success_status=$(kubectl get job $release_job_name -o jsonpath='{.status.succeeded}')
    failed_status=$(kubectl get job $release_job_name -o jsonpath='{.status.failed}')

    if [[ "$success_status" == "1" ]]; then
        echo "Job completed successfully."
        delete_release_job
        break
    fi

    if [[ "$failed_status" == "1" ]]; then
        echo "Job failed exiting ..."
        delete_release_job
        exit 1
    fi

    if [[ $count -ge $max_retries ]]; then
        echo "Timed out waiting for job to complete"
        delete_release_job
        exit 1
    fi

    sleep 5
    count=$((count + 1))
done

echo "Deploying application..."

kubectl set image deployment/django-app django=${IMAGE} -n default
kubectl rollout status deployment/django-app -n default

echo "Updating cron jobs..."

{% for cronjob in cronjobs %}
kubectl set image cronjob/{{ cronjob.name }} django=${IMAGE} -n default
{% endfor %}
