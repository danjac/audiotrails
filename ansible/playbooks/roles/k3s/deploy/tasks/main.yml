- name: Set variables for the deployment
  ansible.builtin.set_fact:
      kubeconfig: "/home/{{ ansible_user }}/.kube/config"
      cronjobs:
          - {
                name: "parse-feeds",
                schedule: "*/6 * * * *", # Every 6 minutes
                command: "./manage.py parse_feeds",
            }
          - {
                name: "create-recommendations",
                schedule: "20 15 * * *", # 3:20 PM
                command: "./manage.py create_recommendations",
            }
          - {
                name: "send-recommendations",
                schedule: "45 18 * * 1", # 6:45 PM every Monday
                command: "./manage.py send_recommendations",
            }
          - {
                name: "fetch-itunes-chart",
                schedule: "15 7 * * *", # 7:15 AM
                command: "./manage.py fetch_itunes_chart",
            }

          - {
                name: "clear-sessions",
                schedule: "5 5 * * *", # 5:05 AM
                command: "./manage.py clearsessions",
            }

- name: Label the nodes
  ansible.builtin.shell: |
      kubectl label nodes {{ hostvars[item].hostname }} role={{ hostvars[item].role }} --overwrite
  loop: "{{ groups['agents'] + groups['server'] }}"
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Get the current image from Kubernetes
  ansible.builtin.command: kubectl get deployment django-app -n default -o jsonpath="{.spec.template.spec.containers[0].image}"
  register: current_image_result
  changed_when: false
  failed_when: false # Don't fail if deployment doesn't exist
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Set default image if no current deployment exists
  ansible.builtin.set_fact:
      current_image: "{{ current_image_result.stdout if current_image_result.stdout else docker_image + ':main' }}"

- name: Get Django hosts
  ansible.builtin.set_fact:
      django_hosts: "{{ groups['agents'] | map('extract', hostvars) | selectattr('role', 'equalto', 'agent') | list }}"

- name: Apply spec files
  vars:
      database_url: "postgresql://postgres:{{ postgres_password }}@postgres.default.svc.cluster.local:5432/postgres"
      redis_url: "redis://redis.default.svc.cluster.local:6379/0"
      replicas: "{{ django_hosts|length }}"

  ansible.builtin.command: >
      kubectl apply -f -
  args:
      stdin: "{{ lookup('template', item + '.j2') }}"
  loop:
      - configmap.yaml
      - secrets.yaml
      - deployment.yaml
      - cronjobs.yaml
      - service.yaml
      - postgres_pv.yaml
      - postgres_pvc.yaml
      - postgres_statefulset.yaml
      - postgres_service.yaml
      - redis_deployment.yaml
      - redis_service.yaml

  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Add scripts to the deployment
  ansible.builtin.template:
      src: "{{ item }}.j2"
      dest: "{{ item }}"
      mode: "u+x"
  loop:
      - deploy.sh
      - manage.sh
      - psql.sh

- name: Set tag from the current image
  ansible.builtin.set_fact:
      release_tag: "{{ current_image.split(':')[1] }}"

- name: Run the deploy script to do Django migrations etc
  ansible.builtin.shell: |
      ./deploy.sh
  environment:
      TAG: "{{ release_tag }}"
