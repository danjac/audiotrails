- name: Set variables for the deployment
  ansible.builtin.set_fact:
      kubeconfig: "/home/{{ ansible_user }}/.kube/config"
      cronjobs:
          - {
                name: "parse-feeds",
                schedule: "*/6 * * * *",
                command: "./manage.py parse_feeds",
            }
          - {
                name: "create-recommendations",
                schedule: "20 15 * * *",
                command: "./manage.py create_recommendations",
            }
          - {
                name: "send-recommendations",
                schedule: "45 18 * * 1",
                command: "./manage.py send_recommendations",
            }
          - {
                name: "clear-sessions",
                schedule: "5 5 * * *",
                command: "./manage.py clearsessions",
            }
      spec_files:
          - deployment.yaml
          - release.yaml
          - cronjobs.yaml
          - service.yaml
          - configmap.yaml
          - secrets.yaml

- name: Apply CoreDNS ConfigMap
  ansible.builtin.command: >
    kubectl apply -f -
  args:
    stdin: |
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: coredns
        namespace: kube-system
      data:
        Corefile: |
          {{ lookup('file', 'files/coredns.yaml') | indent(10) }}
  environment:
    KUBECONFIG: "{{ kubeconfig }}"

- name: Label the agent nodes
  ansible.builtin.shell: |
      kubectl label nodes {{ hostvars[item].node_name }} role=agent
  loop: "{{ groups['agents'] }}"
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Get the current image from Kubernetes
  ansible.builtin.command: kubectl get deployment django-app -n default -o jsonpath="{.spec.template.spec.containers[0].image}"
  register: current_image_result
  changed_when: false
  failed_when: false # Don't fail if deployment doesn't exist
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Set default image if no current deployment exists
  ansible.builtin.set_fact:
      current_image: "{{ current_image_result.stdout if current_image_result.stdout else docker_image + ':main' }}"

- name: Set release_job_name with random tag
  ansible.builtin.set_fact:
      release_job_name: "{{ 'django-release-job-' + ansible_date_time.iso8601_basic | replace('T', '') }}"

- name: Apply spec files
  vars:
    database_ip: "{{ hostvars[groups['database'][0]].private_ip }}"
    database_url: "postgresql://postgres:{{ postgres_password }}@{{ database_ip }}:5432/postgres"
    redis_url: "redis://{{ database_ip }}:6379/0"
    replicas: "{{ groups['agents']|length }}"
  ansible.builtin.command: >
    kubectl apply -f -
  args:
    stdin: "{{ lookup('template', item + '.j2') }}"
  loop: "{{ spec_files }}"
  environment:
    KUBECONFIG: "{{ kubeconfig }}"

- name: Restart CoreDNS pods
  ansible.builtin.command: kubectl rollout restart deployment coredns -n kube-system
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Run the Django release job to run migrations etc
  ansible.builtin.shell: |
      kubectl wait --for=condition=complete job/{{ release_job_name }} --timeout=60s
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Delete release job once it has executed
  ansible.builtin.shell: |
      kubectl delete pod -l job-name={{ release_job_name }}
      kubectl delete job {{ release_job_name }} -n default
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Change release job facts to use environment variables
  ansible.builtin.set_fact:
      current_image: "$IMAGE"
      release_job_name: "$RELEASE_JOB_NAME"

- name: Render release job template into variable
  ansible.builtin.set_fact:
      release_job: "{{ lookup('template', 'release.yaml.j2') }}"

- name: Create deploy.sh script for CI/CD deployments
  ansible.builtin.template:
      src: deploy.sh.j2
      dest: deploy.sh
      mode: "u+x"
