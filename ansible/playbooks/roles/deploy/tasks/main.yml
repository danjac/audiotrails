- name: Set KUBECONFIG environment variable
  ansible.builtin.set_fact:
      kubeconfig: "/home/{{ ansible_user }}/.kube/config"

- name: Create a clean Corefile with forwarders 8.8.8.8 and 1.1.1.1
  ansible.builtin.copy:
      src: coredns.yaml
      dest: "{{ coredns_configfile }}"

- name: Create and apply the new CoreDNS ConfigMap
  ansible.builtin.shell: |
      kubectl create configmap coredns --from-file=Corefile={{ coredns_configfile }} -n kube-system --dry-run=client -o yaml | kubectl apply -f -
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Remove temp CoreDNS file
  ansible.builtin.file:
      path: "{{ coredns_configfile }}"
      state: absent

- name: Label the agent nodes
  ansible.builtin.shell: |
      kubectl label nodes {{ hostvars[item].node_name }} role=agent
  loop: "{{ groups['agents'] }}"
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Get the current image from Kubernetes
  ansible.builtin.command: kubectl get deployment django-app -n default -o jsonpath="{.spec.template.spec.containers[0].image}"
  register: current_image_result
  changed_when: false
  failed_when: false # Don't fail if deployment doesn't exist
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Set default image if no current deployment exists
  ansible.builtin.set_fact:
      current_image: "{{ current_image_result.stdout if current_image_result.stdout else docker_image + ':main' }}"

- name: Debug current image
  ansible.builtin.debug:
      msg: "Current deployment image: {{ current_image }}"

- name: Set release_job_name with random tag
  ansible.builtin.set_fact:
      release_job_name: "{{ 'django-release-job-' + ansible_date_time.iso8601_basic | replace('T', '') }}"

- name: Install deployment files
  vars:
      database_ip: "{{ hostvars[groups['database'][0]].private_ip }}"
      database_url: "postgresql://postgres:{{ postgres_password }}@{{ database_ip }}:5432/postgres"
      replicas: "{{ groups['agents']|length }}"
  ansible.builtin.template:
      src: "{{ item }}.j2"
      dest: /tmp/{{ item }}
  loop: "{{ spec_files }}"

- name: Apply deployment files
  ansible.builtin.shell: kubectl apply -f /tmp/{{ item }}
  loop: "{{ spec_files }}"
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Restart CoreDNS pods
  ansible.builtin.command: kubectl rollout restart deployment coredns -n kube-system
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Remove all temp files
  ansible.builtin.file:
      path: /tmp/{{ item }}
      state: absent
  loop: "{{ spec_files }}"

- name: Run the Django release job to run migrations etc
  ansible.builtin.shell: |
      kubectl wait --for=condition=complete job/{{ release_job_name }} --timeout=60s
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Delete release job once it has executed
  ansible.builtin.shell: |
      kubectl delete pod -l job-name={{ release_job_name }}
      kubectl delete job {{ release_job_name }} -n default
  environment:
      KUBECONFIG: "{{ kubeconfig }}"

- name: Change current_image to literal $IMAGE
  ansible.builtin.set_fact:
      current_image: "$IMAGE"
      release_job_name: "$RELEASE_JOB_NAME"

- name: Render release job template into variable
  ansible.builtin.set_fact:
      release_job: "{{ lookup('template', 'k3s-release.yaml.j2') }}"

- name: Create deploy.sh script for CI/CD deployments
  ansible.builtin.template:
      src: deploy.sh.j2
      dest: deploy.sh
      mode: "u+x"
