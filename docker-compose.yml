version: '3.8'

x-logging: &default-logging
    options:
        max-size: '100k'
        max-file: '3'

x-environment: &default-environment
    DATABASE_URL: postgres://postgres:password@postgres:5432/postgres
    EMAIL_HOST: mailhog
    EMAIL_PORT: 1025
    REDIS_URL: redis://redis:6379/0
    SECRET_KEY: seekrit!

services:
    postgres:
        image: postgres:14.1
        environment:
            - POSTGRES_PASSWORD=password
        volumes:
            - pg_data:/var/lib/postgresql/data
        stop_grace_period: '3s'
        logging: *default-logging
        healthcheck:
            test: ['CMD', 'pg_isready', '-U', 'postgres']
            interval: 1s
            timeout: 3s
            retries: 30

    redis:
        image: redis:6.2.6-buster
        stop_grace_period: '3s'
        logging: *default-logging
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 1s
            timeout: 3s
            retries: 30

    mailhog:
        image: mailhog/mailhog:v1.0.1
        stop_grace_period: '3s'
        logging: *default-logging
        ports:
            - '8025:8025'
            - '1025:1025'

    webapp:
        build:
            context: .
            target: django
        environment: *default-environment
        logging: *default-logging
        restart: on-failure
        privileged: true
        tty: true
        stop_grace_period: '3s'
        ports:
            - '8000:8000'
        depends_on:
            postgres:
                condition: service_healthy
            redis:
                condition: service_healthy
        volumes:
            - ./:/app:z
        command: >
            sh -c "python manage.py migrate
                   python manage.py runserver 0.0.0.0:8000"

    celeryworker:
        build:
            context: .
            target: django
        environment: *default-environment
        logging: *default-logging
        restart: on-failure
        privileged: true
        tty: true
        stop_grace_period: '3s'
        ports: []
        depends_on:
            - webapp
        volumes:
            - ./:/app:z
        command: 'celery -A podtracker.config.celery_app worker -l INFO'

    celerybeat:
        build:
            context: .
            target: django
        environment: *default-environment
        logging: *default-logging
        restart: on-failure
        privileged: true
        tty: true
        stop_grace_period: '3s'
        ports: []
        depends_on:
            - celeryworker
        volumes:
            - ./:/app:z
        command: 'celery -A podtracker.config.celery_app beat -l INFO'

    watcher:
        build:
            context: .
            target: node
        logging: *default-logging
        restart: on-failure
        privileged: true
        tty: true
        stop_grace_period: '3s'
        ports: []
        volumes:
            - ./:/app:z
            - /app/node_modules
        command: 'npm run watch'

volumes:
    pg_data: {}
