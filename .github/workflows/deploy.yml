name: radiofeed:deploy
run-name: ${{ github.actor }} is deploying to production servers
on:
    workflow_dispatch:
        branches:
            - main
jobs:
    run_checks:
        uses: ./.github/workflows/checks.yml
    build_docker:
        runs-on: ubuntu-latest
        needs: run_checks
        permissions: write-all
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
        steps:
            - name: Cloning repo
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Log in to Github Registry
              uses: docker/login-action@v3.2.0
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3.3.0
              with:
                  version: v0.10.0
            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@v5.6.1
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@v6.2.0
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                  subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  subject-digest: ${{ steps.push.outputs.digest }}
                  push-to-registry: true
    deploy_stack:
        runs-on: ubuntu-latest
        needs: build_docker
        steps:
            - name: Deploy to swarm manager
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.SWARM_MANAGER_IP }}
                  username: ${{ secrets.DEPLOY_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: ./deploy.sh
