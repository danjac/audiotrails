name: listenwave_deploy_docker
run-name: ${{ github.actor }} is deploying to Docker
on:
    workflow_dispatch:
        branches:
            - main
jobs:
    # run_checks:
    #    uses: ./.github/workflows/checks.yml
    build_docker:
        # needs: run_checks
        permissions: write-all
        runs-on: ubuntu-latest
        env:
            REGISTRY: docker.io
            DOCKER_IMAGE: danjac2018/listenwave
            DOCKER_TAG: latest
        steps:
            - name: Cloning repo
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Log in to Docker Hub
              uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Build and push Docker image
              id: push
              uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
              with:
                context: .
                file: ./Dockerfile
                push: true
                tags: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
            - name: Generate artifact attestation
              uses: actions/attest-build-provenance@v1
              with:
                subject-name: ${{ env.REGISTRY }}/${{ env.DOCKER_IMAGE }}
                subject-digest: ${{ steps.push.outputs.digest }}
                push-to-registry: true
    deploy_docker:
        runs-on: ubuntu-latest
        needs: build_docker
        steps:
            - name: Cloning repo
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - name: Deploy to cron scheduler
              uses: appleboy/ssh-action@master
              with:
                  host: ${{ secrets.CRON_SCHEDULER_IP }}
                  username: ${{ secrets.DEPLOY_USER }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  script: |
                    docker compose pull
                    docker compose run --rm cron_scheduler ./release.sh
