# Generated by Django 3.1.3 on 2020-12-16 13:01

import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.contrib.postgres.search
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import sorl.thumbnail.fields

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("podcasts", "0001_initial"),
        ("podcasts", "0002_add_trigram_ext"),
        ("podcasts", "0003_auto_20201207_1740"),
        ("podcasts", "0004_auto_20201213_1448"),
        ("podcasts", "0005_auto_20201213_2231"),
        ("podcasts", "0006_podcast_search_trigger"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="podcasts.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "categories",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Podcast",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rss", models.URLField(max_length=500, unique=True)),
                ("etag", models.TextField(blank=True)),
                ("title", models.TextField()),
                ("pub_date", models.DateTimeField(blank=True, null=True)),
                (
                    "cover_image",
                    sorl.thumbnail.fields.ImageField(
                        blank=True, null=True, upload_to=""
                    ),
                ),
                ("itunes", models.URLField(blank=True, max_length=500, null=True)),
                ("language", models.CharField(default="en", max_length=2)),
                ("description", models.TextField(blank=True)),
                ("link", models.URLField(blank=True, max_length=500, null=True)),
                ("keywords", models.TextField(blank=True)),
                ("authors", models.TextField(blank=True)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                ("explicit", models.BooleanField(default=False)),
                (
                    "categories",
                    models.ManyToManyField(blank=True, to="podcasts.Category"),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-pub_date"], name="podcasts_po_pub_dat_850a22_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["pub_date"], name="podcasts_po_pub_dat_2e433a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["title"], name="podcasts_po_title_b6422d_idx"),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["-title"], name="podcasts_po_title_f62b0b_idx"),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["-created"], name="podcasts_su_created_55323d_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"), name="uniq_subscription"
            ),
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("frequency", models.PositiveIntegerField(default=0)),
                (
                    "similarity",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=100, null=True
                    ),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "recommended",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["podcast"], name="podcasts_re_podcast_10c46d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["recommended"], name="podcasts_re_recomme_244ce9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["-similarity", "-frequency"],
                name="podcasts_re_similar_3e4170_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="recommendation",
            constraint=models.UniqueConstraint(
                fields=("podcast", "recommended"), name="unique_recommendation"
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_b6422d_idx",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_f62b0b_idx",
        ),
        migrations.AddField(
            model_name="podcast",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(
                editable=False, null=True
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="podcasts_po_search__4c951f_gin"
            ),
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector, 'pg_catalog.english', title, keywords);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
    ]
