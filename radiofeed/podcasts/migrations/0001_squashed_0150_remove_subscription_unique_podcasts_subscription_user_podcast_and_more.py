# Generated by Django 4.0.6 on 2022-07-17 11:09


import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.contrib.postgres.search
import django.core.validators
import django.db.migrations.operations.special
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import model_utils.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0003_remove_user_autoplay"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="podcasts.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "categories",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Podcast",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rss", models.URLField(max_length=500, unique=True)),
                ("etag", models.TextField(blank=True)),
                ("title", models.TextField()),
                ("pub_date", models.DateTimeField(blank=True, null=True)),
                ("cover_image", models.ImageField(blank=True, null=True, upload_to="")),
                ("itunes", models.URLField(blank=True, max_length=500, null=True)),
                ("language", models.CharField(default="en", max_length=2)),
                ("description", models.TextField(blank=True)),
                ("link", models.URLField(blank=True, max_length=500, null=True)),
                ("keywords", models.TextField(blank=True)),
                ("authors", models.TextField(blank=True)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                ("explicit", models.BooleanField(default=False)),
                (
                    "categories",
                    models.ManyToManyField(blank=True, to="podcasts.category"),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-pub_date"], name="podcasts_po_pub_dat_850a22_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["pub_date"], name="podcasts_po_pub_dat_2e433a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["title"], name="podcasts_po_title_b6422d_idx"),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["-title"], name="podcasts_po_title_f62b0b_idx"),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["-created"], name="podcasts_su_created_55323d_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"), name="uniq_subscription"
            ),
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("frequency", models.PositiveIntegerField(default=0)),
                (
                    "similarity",
                    models.DecimalField(
                        blank=True, decimal_places=10, max_digits=100, null=True
                    ),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "recommended",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["podcast"], name="podcasts_re_podcast_10c46d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["recommended"], name="podcasts_re_recomme_244ce9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["-similarity", "-frequency"],
                name="podcasts_re_similar_3e4170_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="recommendation",
            constraint=models.UniqueConstraint(
                fields=("podcast", "recommended"), name="unique_recommendation"
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_b6422d_idx",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_f62b0b_idx",
        ),
        migrations.AddField(
            model_name="podcast",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(
                editable=False, null=True
            ),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="podcasts_po_search__4c951f_gin"
            ),
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector, 'pg_catalog.english', title, keywords);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AddField(
            model_name="category",
            name="itunes_genre_id",
            field=models.IntegerField(
                blank=True, null=True, unique=True, verbose_name="iTunes Genre ID"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="itunes",
            field=models.URLField(blank=True, max_length=500, null=True, unique=True),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector, 'pg_catalog.english', title, keywords, authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AddField(
            model_name="podcast",
            name="extracted_text",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="recipients",
            field=models.ManyToManyField(
                blank=True,
                related_name="recommended_podcasts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="sync_error",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="num_retries",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="podcast",
            name="promoted",
            field=models.BooleanField(default=False),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, extracted_text, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              keywords,\n              authors,\n              extracted_text);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(
                editable=False, primary_key=True, serialize=False
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.AutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              keywords,\n              authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.RenameModel(
            old_name="Subscription",
            new_name="Follow",
        ),
        migrations.RemoveIndex(
            model_name="follow",
            name="podcasts_su_created_55323d_idx",
        ),
        migrations.AddIndex(
            model_name="follow",
            index=models.Index(
                fields=["-created"], name="podcasts_fo_created_0c8c22_idx"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="follow",
            name="uniq_subscription",
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"), name="uniq_follow"
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-created", "-pub_date"], name="podcasts_po_created_47ec2f_idx"
            ),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="authors",
            new_name="creators",
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, creators, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              creators);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="category",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="follow",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="id",
            field=models.BigAutoField(
                auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="language",
            field=models.CharField(
                default="en",
                max_length=2,
                validators=[django.core.validators.MinLengthValidator(2)],
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="cover_image_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="cover_image_etag",
            field=models.TextField(blank=True),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="cover_image_etag",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="cover_image_date",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="num_retries",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="sync_error",
        ),
        migrations.RunSQL(
            sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;CREATE TRIGGER podcast_update_search_trigger BEFORE INSERT OR UPDATE OF title, keywords, creators, extracted_text, search_vector ON podcasts_podcast FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(search_vector, 'pg_catalog.english', title, keywords, creators, extracted_text);UPDATE podcasts_podcast SET search_vector = NULL;",
            reverse_sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="cover_image",
        ),
        migrations.AddField(
            model_name="podcast",
            name="cover_url",
            field=models.URLField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="active",
            field=models.BooleanField(default=True),
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="last_updated",
            new_name="modified",
        ),
        migrations.AddField(
            model_name="podcast",
            name="updated",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name="podcast",
            name="exception",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="error_status",
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="redirect_to",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="podcasts.podcast",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="cover_url",
            field=models.URLField(blank=True, max_length=2083, null=True),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="itunes",
            field=models.URLField(blank=True, max_length=2083, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="link",
            field=models.URLField(blank=True, max_length=2083, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="num_episodes",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="creators",
            new_name="owner",
        ),
        migrations.RunSQL(
            sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;CREATE TRIGGER podcast_update_search_trigger BEFORE INSERT OR UPDATE OF title, keywords, owner, extracted_text, search_vector ON podcasts_podcast FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(search_vector, 'pg_catalog.english', title, keywords, owner, extracted_text);UPDATE podcasts_podcast SET search_vector = NULL;",
            reverse_sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;",
        ),
        migrations.AddField(
            model_name="podcast",
            name="frequency",
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="scheduled",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-scheduled"], name="podcasts_po_schedul_e9ba7e_idx"
            ),
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="frequency",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_created_47ec2f_idx",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_schedul_e9ba7e_idx",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["scheduled", "-pub_date"], name="podcasts_po_schedul_e5e73a_idx"
            ),
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="error_status",
            new_name="status",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="exception",
        ),
        migrations.RemoveConstraint(
            model_name="follow",
            name="uniq_follow",
        ),
        migrations.RemoveConstraint(
            model_name="recommendation",
            name="unique_recommendation",
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"), name="unique_podcasts_follow"
            ),
        ),
        migrations.AddConstraint(
            model_name="recommendation",
            constraint=models.UniqueConstraint(
                fields=("podcast", "recommended"), name="unique_podcasts_recommendation"
            ),
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="status",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="redirect_to",
        ),
        migrations.AddField(
            model_name="podcast",
            name="parsed",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="category",
            name="itunes_genre_id",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="itunes",
        ),
        migrations.AddField(
            model_name="podcast",
            name="exception",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="http_status",
            field=models.SmallIntegerField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;CREATE TRIGGER podcast_update_search_trigger BEFORE INSERT OR UPDATE OF title, owner, search_vector ON podcasts_podcast FOR EACH ROW EXECUTE PROCEDURE tsvector_update_trigger(search_vector, 'pg_catalog.english', title, owner);UPDATE podcasts_podcast SET search_vector = NULL;",
            reverse_sql="DROP TRIGGER IF EXISTS podcast_update_search_trigger ON podcasts_podcast;",
        ),
        migrations.AddField(
            model_name="podcast",
            name="queued",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="funding_text",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="funding_url",
            field=models.URLField(blank=True, max_length=2083, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_subscribed",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="WebHub subscribed until"
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_exception",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_hub",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_requested",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_token",
            field=models.UUIDField(blank=True, editable=False, null=True, unique=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_secret",
            field=models.UUIDField(blank=True, editable=False, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_url",
            field=models.URLField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="num_episodes",
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_exception",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_hub",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_requested",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_secret",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_subscribed",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_token",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_url",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_schedul_e5e73a_idx",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="queued",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="scheduled",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["title"], name="podcasts_po_title_b6422d_idx"),
        ),
        migrations.AddField(
            model_name="podcast",
            name="queued",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="scheduled",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="succeeded",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-succeeded", "-pub_date"],
                name="podcasts_po_succeed_2b570a_idx",
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_succeed_2b570a_idx",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-pub_date", "-succeeded"],
                name="podcasts_po_pub_dat_38d2cb_idx",
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_pub_dat_38d2cb_idx",
        ),
        migrations.AddField(
            model_name="podcast",
            name="changed",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["-changed", "-pub_date"], name="podcasts_po_changed_2e38d6_idx"
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="succeeded",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_changed_2e38d6_idx",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="changed",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["scheduled"], name="podcasts_po_schedul_5829f7_idx"
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_schedul_5829f7_idx",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="queued",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["scheduled", "-pub_date"], name="podcasts_po_schedul_e5e73a_idx"
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_schedul_e5e73a_idx",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["scheduled", "-pub_date", "parsed"],
                name="podcasts_po_schedul_dd36d8_idx",
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_b6422d_idx",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                django.db.models.functions.text.Lower("title"),
                name="podcasts_podcast_title_lower",
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_schedul_dd36d8_idx",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="scheduled",
        ),
        migrations.AddField(
            model_name="podcast",
            name="queued",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="last_build_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="result",
            field=models.CharField(
                blank=True,
                choices=[
                    ("duplicate_feed", "Duplicate Feed"),
                    ("http_error", "HTTP Error"),
                    ("invalid_rss", "Invalid RSS"),
                    ("network_error", "Network Error"),
                    ("not_modified", "Not Modified"),
                    ("success", "Success"),
                ],
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="scheduled",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="parsed",
            new_name="parsed",
        ),
        migrations.AddField(
            model_name="podcast",
            name="schedule_modifier",
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_hub",
            field=models.URLField(blank=True, max_length=500, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_last_called",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_status",
            field=models.CharField(
                blank=True,
                choices=[
                    ("pending", "Pending"),
                    ("requested", "Requested"),
                    ("active", "Active"),
                    ("inactive", "Inactive"),
                ],
                max_length=20,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="websub_status_changed",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="frequency",
            field=models.DurationField(blank=True, null=True),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_last_called",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_hub",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_status",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="websub_status_changed",
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="schedule_modifier",
            new_name="frequency_modifier",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="frequency_modifier",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="scheduled",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="last_build_date",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="frequency",
        ),
        migrations.AddField(
            model_name="podcast",
            name="errors",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="podcast",
            name="content_hash",
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="exception",
        ),
        migrations.AddField(
            model_name="podcast",
            name="feed_queue",
            field=models.CharField(blank=True, max_length=30, null=True),
        ),
        migrations.RenameModel(
            old_name="Follow",
            new_name="Subscription",
        ),
        migrations.RemoveConstraint(
            model_name="subscription",
            name="unique_podcasts_follow",
        ),
        migrations.RemoveIndex(
            model_name="subscription",
            name="podcasts_fo_created_0c8c22_idx",
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["-created"], name="podcasts_su_created_55323d_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"), name="unique_podcasts_subscription"
            ),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_podcast_title_lower",
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(
                fields=["promoted"], name="podcasts_po_promote_fdc955_idx"
            ),
        ),
        migrations.RemoveConstraint(
            model_name="subscription",
            name="unique_podcasts_subscription",
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("user", "podcast"),
                name="unique_podcasts_subscription_user_podcast",
            ),
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="feed_queue",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="queued",
        ),
        migrations.AddField(
            model_name="podcast",
            name="queued",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="result",
            field=models.CharField(
                blank=True,
                choices=[
                    ("duplicate_feed", "Duplicate Feed"),
                    ("http_error", "HTTP Error"),
                    ("invalid_rss", "Invalid RSS"),
                    ("network_error", "Network Error"),
                    ("not_modified", "Not Modified"),
                    ("removed", "Removed"),
                    ("success", "Success"),
                ],
                max_length=20,
                null=True,
            ),
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="queued",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="result",
        ),
        migrations.RemoveField(
            model_name="podcast",
            name="errors",
        ),
        migrations.AlterField(
            model_name="category",
            name="name",
            field=models.CharField(
                max_length=100, unique=True, verbose_name="Category Name"
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="name_en",
            field=models.CharField(
                max_length=100, null=True, unique=True, verbose_name="Category Name"
            ),
        ),
        migrations.AddField(
            model_name="category",
            name="name_fi",
            field=models.CharField(
                max_length=100, null=True, unique=True, verbose_name="Category Name"
            ),
        ),
        migrations.AlterField(
            model_name="category",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="podcasts.category",
                verbose_name="Parent Category",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="active",
            field=models.BooleanField(
                default=True,
                help_text="Inactive podcasts will no longer be updated from their RSS feeds.",
                verbose_name="Active",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="categories",
            field=models.ManyToManyField(
                blank=True, to="podcasts.category", verbose_name="iTunes Categories"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="content_hash",
            field=models.CharField(
                blank=True,
                max_length=64,
                null=True,
                verbose_name="Content Hash of RSS Feed",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="cover_url",
            field=models.URLField(
                blank=True, max_length=2083, null=True, verbose_name="Cover Image"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="created",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="Podcast Added to Database"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="description",
            field=models.TextField(blank=True, verbose_name="Podcast Description"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="etag",
            field=models.TextField(blank=True, verbose_name="HTTP Etag Header"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="explicit",
            field=models.BooleanField(
                default=False, verbose_name="Podcast Contains Explicit or Adult Content"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="extracted_text",
            field=models.TextField(
                blank=True, verbose_name="Keywords Extracted from Podcast Content"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="funding_text",
            field=models.TextField(blank=True, verbose_name="Funding Website Text"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="funding_url",
            field=models.URLField(
                blank=True,
                max_length=2083,
                null=True,
                verbose_name="Funding Website URL",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="http_status",
            field=models.SmallIntegerField(
                blank=True, null=True, verbose_name="Last HTTP Status from RSS Feed"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="keywords",
            field=models.TextField(
                blank=True, verbose_name="Non-iTunes Category Keywords"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="language",
            field=models.CharField(
                default="en",
                max_length=2,
                validators=[django.core.validators.MinLengthValidator(2)],
                verbose_name="Podcast Language",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="link",
            field=models.URLField(
                blank=True, max_length=2083, null=True, verbose_name="Website"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="modified",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="HTTP Modified Header"
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="num_retries",
            field=models.PositiveSmallIntegerField(
                default=0, verbose_name="Number of RSS Feed Retries"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="owner",
            field=models.TextField(blank=True, verbose_name="Podcast Owner(s)"),
        ),
        migrations.AddField(
            model_name="podcast",
            name="parse_result",
            field=models.CharField(
                blank=True,
                choices=[
                    ("success", "Success"),
                    ("complete", "Complete"),
                    ("not_modified", "Not Modified"),
                    ("http_error", "HTTP Error"),
                    ("rss_parser_error", "RSS Parser Error"),
                    ("duplicate_feed", "Duplicate Feed"),
                ],
                max_length=30,
                null=True,
                verbose_name="Last Result from RSS Feed Update",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="parsed",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="Last RSS Feed Check"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="promoted",
            field=models.BooleanField(
                default=False, verbose_name="Promoted to Home Page"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="pub_date",
            field=models.DateTimeField(
                blank=True, null=True, verbose_name="Latest Release Date"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="recipients",
            field=models.ManyToManyField(
                blank=True,
                related_name="recommended_podcasts",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Recommended to Users",
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="rss",
            field=models.URLField(max_length=500, unique=True, verbose_name="RSS Feed"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(
                editable=False, null=True, verbose_name="PostgreSQL Search Vector"
            ),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="title",
            field=models.TextField(verbose_name="Podcast Title"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="updated",
            field=models.DateTimeField(
                auto_now=True, verbose_name="Podcast Updated in Database"
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="frequency",
            field=models.PositiveIntegerField(
                default=0, verbose_name="Frequency Count"
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="podcast",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="podcasts.podcast",
                verbose_name="Podcast",
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="recommended",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="podcasts.podcast",
                verbose_name="Similar Podcast",
            ),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="similarity",
            field=models.DecimalField(
                blank=True,
                decimal_places=10,
                max_digits=100,
                null=True,
                verbose_name="Similarity Rating",
            ),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="podcast",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="podcasts.podcast",
                verbose_name="Podcast",
            ),
        ),
        migrations.RenameField(
            model_name="subscription",
            old_name="user",
            new_name="subscriber",
        ),
        migrations.AlterField(
            model_name="subscription",
            name="subscriber",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL,
                verbose_name="Subscriber",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="subscription",
            name="unique_podcasts_subscription_user_podcast",
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(
                fields=("subscriber", "podcast"),
                name="unique_podcasts_subscription_user_podcast",
            ),
        ),
    ]
