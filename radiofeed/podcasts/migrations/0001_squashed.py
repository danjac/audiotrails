# Generated by Django 3.2 on 2021-04-29 09:44

from __future__ import annotations

import django.contrib.postgres.indexes
import django.contrib.postgres.operations
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields

from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [
        ("podcasts", "0001_squashed_0006_podcast_search_trigger"),
        ("podcasts", "0002_category_itunes_genre_id"),
        ("podcasts", "0003_auto_20201217_2126"),
        ("podcasts", "0004_auto_20201219_1325"),
        ("podcasts", "0006_podcast_search_trigger_with_authors"),
        ("podcasts", "0007_podcast_extracted_text"),
        ("podcasts", "0008_podcast_recipients"),
        ("podcasts", "0009_podcast_sync_error"),
        ("podcasts", "0010_podcast_num_retries"),
        ("podcasts", "0011_podcast_promoted"),
        ("podcasts", "0012_podcast_search_trigger_with_extracted_text"),
        ("podcasts", "0013_auto_20210210_1530"),
        ("podcasts", "0014_auto_20210210_1702"),
        ("podcasts", "0015_remove_extracted_text_from_trigger"),
        ("podcasts", "0016_auto_20210219_1521"),
        ("podcasts", "0017_podcast_cover_image_etag"),
        ("podcasts", "0018_remove_podcast_cover_image_etag"),
        ("podcasts", "0019_auto_20210310_1029"),
        ("podcasts", "0020_auto_20210310_1029"),
        ("podcasts", "0021_podcast_created"),
        ("podcasts", "0022_auto_20210312_1131"),
        ("podcasts", "0023_remove_keywords_from_search"),
        ("podcasts", "0024_auto_20210320_2156"),
        ("podcasts", "0025_add_creators_to_search_trigger"),
        ("podcasts", "0026_alter_category_id"),
        ("podcasts", "0027_auto_20210413_1707"),
        ("podcasts", "0028_alter_podcast_language"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="podcasts.category",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "categories",
                "ordering": ("name",),
            },
        ),
        migrations.CreateModel(
            name="Podcast",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rss", models.URLField(max_length=500, unique=True)),
                ("etag", models.TextField(blank=True)),
                ("title", models.TextField()),
                ("pub_date", models.DateTimeField(blank=True, null=True)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to=""),
                ),
                ("itunes", models.URLField(blank=True, max_length=500, null=True)),
                ("language", models.CharField(default="en", max_length=2)),
                ("description", models.TextField(blank=True)),
                ("link", models.URLField(blank=True, max_length=500, null=True)),
                ("keywords", models.TextField(blank=True)),
                ("authors", models.TextField(blank=True)),
                ("last_updated", models.DateTimeField(blank=True, null=True)),
                ("explicit", models.BooleanField(default=False)),
                (
                    "categories",
                    models.ManyToManyField(blank=True, to="podcasts.Category"),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["-pub_date"], name="podcasts_po_pub_dat_850a22_idx"),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["pub_date"], name="podcasts_po_pub_dat_2e433a_idx"),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["title"], name="podcasts_po_title_b6422d_idx"),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["-title"], name="podcasts_po_title_f62b0b_idx"),
        ),
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(fields=["-created"], name="podcasts_su_created_55323d_idx"),
        ),
        migrations.AddConstraint(
            model_name="subscription",
            constraint=models.UniqueConstraint(fields=("user", "podcast"), name="uniq_subscription"),
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("frequency", models.PositiveIntegerField(default=0)),
                (
                    "similarity",
                    models.DecimalField(blank=True, decimal_places=10, max_digits=100, null=True),
                ),
                (
                    "podcast",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
                (
                    "recommended",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="podcasts.podcast",
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(fields=["podcast"], name="podcasts_re_podcast_10c46d_idx"),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(fields=["recommended"], name="podcasts_re_recomme_244ce9_idx"),
        ),
        migrations.AddIndex(
            model_name="recommendation",
            index=models.Index(
                fields=["-similarity", "-frequency"],
                name="podcasts_re_similar_3e4170_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="recommendation",
            constraint=models.UniqueConstraint(fields=("podcast", "recommended"), name="unique_recommendation"),
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_b6422d_idx",
        ),
        migrations.RemoveIndex(
            model_name="podcast",
            name="podcasts_po_title_f62b0b_idx",
        ),
        migrations.AddField(
            model_name="podcast",
            name="search_vector",
            field=django.contrib.postgres.search.SearchVectorField(editable=False, null=True),
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=django.contrib.postgres.indexes.GinIndex(
                fields=["search_vector"], name="podcasts_po_search__4c951f_gin"
            ),
        ),
        migrations.RunSQL(
            sql="\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector, 'pg_catalog.english', title, keywords);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AddField(
            model_name="category",
            name="itunes_genre_id",
            field=models.IntegerField(blank=True, null=True, unique=True, verbose_name="iTunes Genre ID"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="itunes",
            field=models.URLField(blank=True, max_length=500, null=True, unique=True),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector, 'pg_catalog.english', title, keywords, authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AddField(
            model_name="podcast",
            name="extracted_text",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="recipients",
            field=models.ManyToManyField(
                blank=True,
                related_name="recommended_podcasts",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="podcast",
            name="sync_error",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="podcast",
            name="num_retries",
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="podcast",
            name="promoted",
            field=models.BooleanField(default=False),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, extracted_text, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              keywords,\n              authors,\n              extracted_text);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(editable=False, primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, keywords, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              keywords,\n              authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name="subscription",
            name="id",
            field=models.BigAutoField(primary_key=True, serialize=False),
        ),
        migrations.RenameModel(
            old_name="Subscription",
            new_name="Follow",
        ),
        migrations.RemoveIndex(
            model_name="follow",
            name="podcasts_su_created_55323d_idx",
        ),
        migrations.AddIndex(
            model_name="follow",
            index=models.Index(fields=["-created"], name="podcasts_fo_created_0c8c22_idx"),
        ),
        migrations.RemoveConstraint(
            model_name="follow",
            name="uniq_subscription",
        ),
        migrations.AddConstraint(
            model_name="follow",
            constraint=models.UniqueConstraint(fields=("user", "podcast"), name="uniq_follow"),
        ),
        migrations.AddField(
            model_name="podcast",
            name="created",
            field=models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now),
            preserve_default=False,
        ),
        migrations.AddIndex(
            model_name="podcast",
            index=models.Index(fields=["-created", "-pub_date"], name="podcasts_po_created_47ec2f_idx"),
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, authors, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              authors);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.RenameField(
            model_name="podcast",
            old_name="authors",
            new_name="creators",
        ),
        migrations.RunSQL(
            sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            CREATE TRIGGER podcast_update_search_trigger\n            BEFORE INSERT OR UPDATE OF title, creators, search_vector\n            ON podcasts_podcast\n            FOR EACH ROW EXECUTE PROCEDURE\n            tsvector_update_trigger(\n              search_vector,\n              'pg_catalog.english',\n              title,\n              creators);\n            UPDATE podcasts_podcast SET search_vector = NULL;\n            ",
            reverse_sql="\n            DROP TRIGGER IF EXISTS podcast_update_search_trigger\n            ON podcasts_podcast;\n            ",
        ),
        migrations.AlterField(
            model_name="category",
            name="id",
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
        migrations.AlterField(
            model_name="follow",
            name="id",
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="id",
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
        migrations.AlterField(
            model_name="recommendation",
            name="id",
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID"),
        ),
        migrations.AlterField(
            model_name="podcast",
            name="language",
            field=models.CharField(
                default="en",
                max_length=2,
                validators=[django.core.validators.MinLengthValidator(2)],
            ),
        ),
    ]
